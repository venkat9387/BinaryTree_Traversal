/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    
    //Approach 2 - Using Iterative methodology

    //Declare Output
    List<int> result = new List<int>();
    Stack<TreeNode> myStack = new Stack<TreeNode>();
    
    
    public IList<int> PreorderTraversal(TreeNode root) {
        
        if(root == null)
            return result;
        
        myStack.Push(root);
        while(myStack.Count!=0){
            TreeNode currNode = myStack.Peek();
            myStack.Pop();
            if(currNode!=null)
            {
                result.Add(currNode.val);
                myStack.Push(currNode.right);
                myStack.Push(currNode.left);
            }            
        }
        return result;
    }
}
